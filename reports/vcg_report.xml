<?xml version="1.0" encoding="utf-8"?><!--XML Export of VCG Results for directory: . Scanned for Java security issues.--><CodeIssueCollection><CodeIssue><Priority>7</Priority><Severity>Potential Issue</Severity><Title>Public Class Not Declared as Final</Title><Description>The class is not declared as final as per OWASP recommendations. It is considered best practice to make classes final where possible and practical (i.e. It has no classes which inherit from it). Non-Final classes can allow an attacker to extend a class in a malicious manner. Manually inspect the code to determine whether or not it is practical to make this class final.</Description><FileName>C:\bootcamp\java\code\stack\src\com\philps\training\generics\FixedArrayStack.java</FileName><Line>3</Line><CodeLine>public class FixedArrayStack&lt;E&gt; implements Stack&lt;E&gt; {</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>4</Priority><Severity>Standard</Severity><Title>Class Contains Public Variable: StackFullException</Title><Description>The class variable may be accessed and modified by other classes without the use of getter/setter methods. It is considered unsafe to have public fields or methods in a class unless required as any method, field, or class that is not private is a potential avenue of attack. It is safer to provide accessor methods to variables in order to limit their accessibility.</Description><FileName>C:\bootcamp\java\code\stack\src\com\philps\training\generics\Stack.java</FileName><Line>44</Line><CodeLine>	public void push(E element) throws StackFullException;</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>4</Priority><Severity>Standard</Severity><Title>Class Contains Public Variable: StackEmptyException</Title><Description>The class variable may be accessed and modified by other classes without the use of getter/setter methods. It is considered unsafe to have public fields or methods in a class unless required as any method, field, or class that is not private is a potential avenue of attack. It is safer to provide accessor methods to variables in order to limit their accessibility.</Description><FileName>C:\bootcamp\java\code\stack\src\com\philps\training\generics\Stack.java</FileName><Line>45</Line><CodeLine>	public E pop() throws StackEmptyException;</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>7</Priority><Severity>Potential Issue</Severity><Title>Public Class Not Declared as Final</Title><Description>The class is not declared as final as per OWASP recommendations. It is considered best practice to make classes final where possible and practical (i.e. It has no classes which inherit from it). Non-Final classes can allow an attacker to extend a class in a malicious manner. Manually inspect the code to determine whether or not it is practical to make this class final.</Description><FileName>C:\bootcamp\java\code\stack\src\com\philps\training\generics\StackApp.java</FileName><Line>49</Line><CodeLine>public class StackApp {</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>5</Priority><Severity>Low</Severity><Title>Operation on Primitive Data Type</Title><Description>The code appears to be carrying out a mathematical operation on a primitive data type. In some circumstances this can result in an overflow and unexpected behaviour. Check the code manually to determine the risk.</Description><FileName>C:\bootcamp\java\code\stack\src\com\philps\training\generics\StackApp.java</FileName><Line>66</Line><CodeLine>		for(int i=0;i&lt;10;i++) {</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>7</Priority><Severity>Potential Issue</Severity><Title>Public Class Not Declared as Final</Title><Description>The class is not declared as final as per OWASP recommendations. It is considered best practice to make classes final where possible and practical (i.e. It has no classes which inherit from it). Non-Final classes can allow an attacker to extend a class in a malicious manner. Manually inspect the code to determine whether or not it is practical to make this class final.</Description><FileName>C:\bootcamp\java\code\stack\src\com\philps\training\generics\StackEmptyException.java</FileName><Line>75</Line><CodeLine>public class StackEmptyException extends Exception{</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>7</Priority><Severity>Potential Issue</Severity><Title>Public Class Not Declared as Final</Title><Description>The class is not declared as final as per OWASP recommendations. It is considered best practice to make classes final where possible and practical (i.e. It has no classes which inherit from it). Non-Final classes can allow an attacker to extend a class in a malicious manner. Manually inspect the code to determine whether or not it is practical to make this class final.</Description><FileName>C:\bootcamp\java\code\stack\src\com\philps\training\generics\StackFullException.java</FileName><Line>84</Line><CodeLine>public class StackFullException extends Exception {</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>7</Priority><Severity>Potential Issue</Severity><Title>Public Class Not Declared as Final</Title><Description>The class is not declared as final as per OWASP recommendations. It is considered best practice to make classes final where possible and practical (i.e. It has no classes which inherit from it). Non-Final classes can allow an attacker to extend a class in a malicious manner. Manually inspect the code to determine whether or not it is practical to make this class final.</Description><FileName>C:\bootcamp\java\code\stack\src\com\philps\training\generics\StackUser.java</FileName><Line>93</Line><CodeLine>public class StackUser {</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>5</Priority><Severity>Low</Severity><Title>Operation on Primitive Data Type</Title><Description>The code appears to be carrying out a mathematical operation on a primitive data type. In some circumstances this can result in an overflow and unexpected behaviour. Check the code manually to determine the risk.</Description><FileName>C:\bootcamp\java\code\stack\src\com\philps\training\generics\StackUser.java</FileName><Line>97</Line><CodeLine>		for(int i = 0; i &lt; 10; i++) {</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>5</Priority><Severity>Low</Severity><Title>Operation on Primitive Data Type</Title><Description>The code appears to be carrying out a mathematical operation on a primitive data type. In some circumstances this can result in an overflow and unexpected behaviour. Check the code manually to determine the risk.</Description><FileName>C:\bootcamp\java\code\stack\src\com\philps\training\generics\StackUser.java</FileName><Line>98</Line><CodeLine>			s.push(i*2);</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>5</Priority><Severity>Low</Severity><Title>Operation on Primitive Data Type</Title><Description>The code appears to be carrying out a mathematical operation on a primitive data type. In some circumstances this can result in an overflow and unexpected behaviour. Check the code manually to determine the risk.</Description><FileName>C:\bootcamp\java\code\stack\src\com\philps\training\generics\StackUser.java</FileName><Line>99</Line><CodeLine>			System.out.println(i*2);</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>5</Priority><Severity>Low</Severity><Title>Operation on Primitive Data Type</Title><Description>The code appears to be carrying out a mathematical operation on a primitive data type. In some circumstances this can result in an overflow and unexpected behaviour. Check the code manually to determine the risk.</Description><FileName>C:\bootcamp\java\code\stack\src\com\philps\training\generics\StackUser.java</FileName><Line>105</Line><CodeLine>		for(int i = 0; i&lt; 10 ;i++) {</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>7</Priority><Severity>Potential Issue</Severity><Title>Public Class Not Declared as Final</Title><Description>The class is not declared as final as per OWASP recommendations. It is considered best practice to make classes final where possible and practical (i.e. It has no classes which inherit from it). Non-Final classes can allow an attacker to extend a class in a malicious manner. Manually inspect the code to determine whether or not it is practical to make this class final.</Description><FileName>C:\bootcamp\java\code\stack\src\stack\FixedArrayStack.java</FileName><Line>112</Line><CodeLine>public class FixedArrayStack implements Stack {</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>4</Priority><Severity>Standard</Severity><Title>Class Contains Public Variable: StackFullException</Title><Description>The class variable may be accessed and modified by other classes without the use of getter/setter methods. It is considered unsafe to have public fields or methods in a class unless required as any method, field, or class that is not private is a potential avenue of attack. It is safer to provide accessor methods to variables in order to limit their accessibility.</Description><FileName>C:\bootcamp\java\code\stack\src\stack\Stack.java</FileName><Line>153</Line><CodeLine>	public void push(Object element) throws StackFullException;</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>4</Priority><Severity>Standard</Severity><Title>Class Contains Public Variable: StackEmptyException</Title><Description>The class variable may be accessed and modified by other classes without the use of getter/setter methods. It is considered unsafe to have public fields or methods in a class unless required as any method, field, or class that is not private is a potential avenue of attack. It is safer to provide accessor methods to variables in order to limit their accessibility.</Description><FileName>C:\bootcamp\java\code\stack\src\stack\Stack.java</FileName><Line>154</Line><CodeLine>	public Object pop() throws StackEmptyException;</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>7</Priority><Severity>Potential Issue</Severity><Title>Public Class Not Declared as Final</Title><Description>The class is not declared as final as per OWASP recommendations. It is considered best practice to make classes final where possible and practical (i.e. It has no classes which inherit from it). Non-Final classes can allow an attacker to extend a class in a malicious manner. Manually inspect the code to determine whether or not it is practical to make this class final.</Description><FileName>C:\bootcamp\java\code\stack\src\stack\StackApp.java</FileName><Line>158</Line><CodeLine>public class StackApp {</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>7</Priority><Severity>Potential Issue</Severity><Title>Public Class Not Declared as Final</Title><Description>The class is not declared as final as per OWASP recommendations. It is considered best practice to make classes final where possible and practical (i.e. It has no classes which inherit from it). Non-Final classes can allow an attacker to extend a class in a malicious manner. Manually inspect the code to determine whether or not it is practical to make this class final.</Description><FileName>C:\bootcamp\java\code\stack\src\stack\StackEmptyException.java</FileName><Line>171</Line><CodeLine>public class StackEmptyException extends Exception{</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>7</Priority><Severity>Potential Issue</Severity><Title>Public Class Not Declared as Final</Title><Description>The class is not declared as final as per OWASP recommendations. It is considered best practice to make classes final where possible and practical (i.e. It has no classes which inherit from it). Non-Final classes can allow an attacker to extend a class in a malicious manner. Manually inspect the code to determine whether or not it is practical to make this class final.</Description><FileName>C:\bootcamp\java\code\stack\src\stack\StackFullException.java</FileName><Line>180</Line><CodeLine>public class StackFullException extends Exception {</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>7</Priority><Severity>Potential Issue</Severity><Title>Public Class Not Declared as Final</Title><Description>The class is not declared as final as per OWASP recommendations. It is considered best practice to make classes final where possible and practical (i.e. It has no classes which inherit from it). Non-Final classes can allow an attacker to extend a class in a malicious manner. Manually inspect the code to determine whether or not it is practical to make this class final.</Description><FileName>C:\bootcamp\java\code\stack\src\stack\StackUser.java</FileName><Line>189</Line><CodeLine>public class StackUser {</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>5</Priority><Severity>Low</Severity><Title>Operation on Primitive Data Type</Title><Description>The code appears to be carrying out a mathematical operation on a primitive data type. In some circumstances this can result in an overflow and unexpected behaviour. Check the code manually to determine the risk.</Description><FileName>C:\bootcamp\java\code\stack\src\stack\StackUser.java</FileName><Line>193</Line><CodeLine>		for(int i = 0; i &lt; 10; i++) {</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>5</Priority><Severity>Low</Severity><Title>Operation on Primitive Data Type</Title><Description>The code appears to be carrying out a mathematical operation on a primitive data type. In some circumstances this can result in an overflow and unexpected behaviour. Check the code manually to determine the risk.</Description><FileName>C:\bootcamp\java\code\stack\src\stack\StackUser.java</FileName><Line>194</Line><CodeLine>			s.push(i*2);</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>5</Priority><Severity>Low</Severity><Title>Operation on Primitive Data Type</Title><Description>The code appears to be carrying out a mathematical operation on a primitive data type. In some circumstances this can result in an overflow and unexpected behaviour. Check the code manually to determine the risk.</Description><FileName>C:\bootcamp\java\code\stack\src\stack\StackUser.java</FileName><Line>195</Line><CodeLine>			System.out.println(i*2);</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue><CodeIssue><Priority>5</Priority><Severity>Low</Severity><Title>Operation on Primitive Data Type</Title><Description>The code appears to be carrying out a mathematical operation on a primitive data type. In some circumstances this can result in an overflow and unexpected behaviour. Check the code manually to determine the risk.</Description><FileName>C:\bootcamp\java\code\stack\src\stack\StackUser.java</FileName><Line>201</Line><CodeLine>		for(int i = 0; i&lt; 10 ;i++) {</CodeLine><Checked>False</Checked><CheckColour>LawnGreen</CheckColour></CodeIssue></CodeIssueCollection>